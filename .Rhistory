} else {
to_delete$delete[to_delete$type == "photogroup"] <- TRUE
}
}
#Locate photos
q4 <- paste0(
"SELECT Photos.* FROM Photos\n",
"WHERE Photos.visitID IN ", sql_IN(my_visitID, FALSE),";"
)
ph <- try(
SELECT(
q4
),
silent = TRUE
)
ph
if(delete_duplicates & !delete_all){
ph <- ph[duplicated(ph$photoDateTime),]
}
#delete photos
to_delete$delete[to_delete$type == "photos"] <- TRUE
# check naming, should all be one city.
if(length(table(substr(ph$filepath, 1, 24))) >1){
stop("wrong visit id's, multiple cities represented")
}
# must be logged into cloud (karivera@uri.edu)
# delete the images first from the cloud
response <- askYesNo("Do you want to delete all of these records?")
if(response != TRUE){ #confirms that you confirm Yes
stop("Not deleting records")
}else{
cat("Deleting records\n")
}
if(is.data.frame(ph)){
gsutil_delete(
images_to_delete = ph,
all = delete_all)
}
# Delete from the data.base now
if(to_delete$delete[1]){
if(delete_all){
q1 <- paste0(
"DELETE Detections.* FROM Detections\n",
"INNER JOIN Photos ON Photos.photoName = Detections.photoName\n",
"WHERE Photos.visitID IN ", sql_IN(my_visitID, FALSE),";"
)
} else {
q1 <- paste0(
"DELETE FROM Detections\n",
"WHERE photoName IN ", sql_IN(ph$photoName),";"
)
}
MODIFY(q1,TRUE)
}
# This deleted records on database
if(to_delete$delete[2]){
q2 <- paste0(
"DELETE AssignedPhotoGroup.* FROM AssignedPhotoGroup\n",
"INNER JOIN PhotoGroup ON PhotoGroup.photoGroupID = AssignedPhotoGroup.photoGroupID\n",
"INNER JOIN Photos ON Photos.photoGroupID = AssignedPhotoGroup.photoGroupID\n",
"WHERE Photos.visitID IN ", sql_IN(my_visitID, FALSE),";"
)
MODIFY(q2, TRUE)
}
if(to_delete$delete[3]){
q3 <- paste0(
"DELETE PhotoGroup.* FROM PhotoGroup\n",
"INNER JOIN Photos ON Photos.photoGroupID = PhotoGroup.photoGroupID\n",
"WHERE Photos.visitID IN ", sql_IN(my_visitID, FALSE),";"
)
MODIFY(q3, TRUE)
}
if(to_delete$delete[4]){
if(delete_all){
q4 <- paste0(
"DELETE Photos.* FROM Photos\n",
"WHERE Photos.visitID IN ", sql_IN(my_visitID, FALSE),";"
)
} else {
q4 <- paste0(
"DELETE FROM Photos\n",
"WHERE photoName IN ", sql_IN(ph$photoName, TRUE),";"
)
}
MODIFY(q4, TRUE)
}
library(lme4)
devtools::install_github("mfidino/bbplot")
library(bbplot)
library("merTools")
library(dplyr)
mod <- readRDS(
"mod_2_test.RDS"
)
# get the data
model_data <- mod@frame
# get the range of the animal weight.
aw_range <- range(model_data$animal_weight_scale)
# prediction sequence
pseq <- seq(aw_range[1], aw_range[2], length.out = 400)
# create the prediction data.frame, including predictions for non-avid users
for_pred <- data.frame(
pielou_scale = 0,
blur_scale = 0,
animal_weight_scale = pseq,
avid_user = 0
)
# this just gets the best fit line, we need to get 95% CI,
#  which we can only approximate given the large model.
to_plot <- predict(
mod,
newdata = for_pred,
re.form = NA
)
# To do this, we use the merTools package, this means
#  we need to add in some random effect stuff for
#  the model predictions. We can locate the "average"
#  with the merTools::averageObs() function.
my_average <- merTools::averageObs(
mod
)
for_pred_mt <- data.frame(
pielou_scale = 0,
blur_scale = 0,
animal_weight_scale = pseq,
avid_user = my_average$avid_user,
expertID = my_average$expertID,
user_id = my_average$user
)
# and approximate those intervals, needs lots of simulations
#  to get a smoother line for plotting.
to_plot_mt <- merTools::predictInterval(
mod,
newdata = for_pred_mt,
which = "fixed",
level = 0.95,
n.sims = 30000
)
# convert to a probability
to_plot_mt <- apply(
to_plot_mt,
2,
plogis
)
# the lines are still a little jagged, just going to smooth them out a tiny
#  bit.
to_plot_smooth <- apply(
to_plot_mt,
2,
function(each_col) lowess(x = pseq, y = each_col)$y
)
# get prop success for each species
# Hmm, there are some double species here, not sure why?
species_prop <- model_data %>%
dplyr::group_by(expertID) %>%
dplyr::summarise(
pc = mean(correct),
aws = unique(animal_weight_scale)
) %>%
data.frame()
# and now we are ready to plot using bbplot, it helps to know the range
#  for the x and y axis (it makes better plots I've found).
range(for_pred_mt$animal_weight_scale)
{
bbplot::blank(
xlim = range(for_pred$animal_weight_scale),
ylim = c(0,1),
bty = "l"
)
# add generic axes to x axis
bbplot::axis_blank(1)
# and to y axis
bbplot::axis_blank(2)
# add numbers to x axis
bbplot::axis_text(
side = 1,
line = 0.8,
cex = 1.25
)
# add numbers to y axis
bbplot::axis_text(
side = 2,
line = 0.8,
cex = 1.25,
las = 1
)
# add x axis title
bbplot::axis_text(
"Animal weight (scaled)",
side  = 1,
line = 3,
cex = 1.25
)
# add y axis title
bbplot::axis_text(
"Probability user correct ID's image",
side = 2,
line = 2.75,
cex = 1.25
)
# add predictive interval to figure
bbplot::ribbon(
x = pseq,
y = to_plot_smooth[,c("upr","lwr")],
col = "purple",
alpha = 0.5
)
# add estimated line
lines(
x = pseq,
y = to_plot_smooth[,"fit"],
col = "purple",
lwd = 3
)
points(
x = species_prop$aws,
y = species_prop$pc,
pch = 19,
cex = 1.2
)
}
mod <- readRDS(
"mod_2_test.RDS"
)
## install & load libraries---------------------------------------------------------------
devtools::install_github("ropensci/FedData", force = TRUE)
# ui.R ----
ui <- fluidPage(
titlePanel(""),  # Add a title panel
sidebarLayout(  # Make the layout a sidebarLayout
sidebarPanel(),  # Inside the sidebarLayout, add a sidebarPanel
mainPanel()  # Inside the sidebarLayout, add a mainPanel
)
)
library("shiny")
library("rsconnect")  # For publishing apps online
# ui.R ----
ui <- fluidPage(
titlePanel(""),  # Add a title panel
sidebarLayout(  # Make the layout a sidebarLayout
sidebarPanel(),  # Inside the sidebarLayout, add a sidebarPanel
mainPanel()  # Inside the sidebarLayout, add a mainPanel
)
)
ui <- fluidPage(
titlePanel("Barley Yield"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "gen",  # Give the input a name "genotype"
label = "1. Select genotype",  # Give the input a label to be displayed in the app
choices = c("A" = "a","B" = "b","C" = "c","D" = "d","E" = "e","F" = "f","G" = "g","H" = "h"), selected = "a"),  # Create the choices that can be selected. e.g. Display "A" and link to value "a"
selectInput(inputId = "colour",
label = "2. Select histogram colour",
choices = c("blue","green","red","purple","grey"), selected = "grey"),
sliderInput(inputId = "bin",
label = "3. Select number of histogram bins",
min=1, max=25, value= c(10)),
textInput(inputId = "text",
label = "4. Enter some text to be displayed", "")
),
mainPanel()
)
)
runApp('E:/GitHub/Coding Club/shiny.R')
# Outputs are created by placing code in the curly brackets ({}) in the server object:
server <- function(input, output) {
output$plot <- renderPlot(ggplot(Barley, aes(x = yield)) +  # Create object called `output$plot` with a ggplot inside it
geom_histogram(bins = 7,  # Add a histogram to the plot
fill = "grey",  # Make the fill colour grey
data = Barley,  # Use data from `Barley`
colour = "black")  # Outline the bins in black
)
}
# Loading Data ----
Barley <- as.data.frame(beaven.barley)
# ui.R ----
ui <-
fluidPage(
titlePanel("Barley Yield"),
sidebarLayout(
position = "right",
sidebarPanel(h3("Inputs for histogram"),
selectInput("gen", "1. Select genotype", choices = c("A" = "a","B" = "b","C" = "c","D" = "d","E" = "e","F" = "f","G" = "g","H" = "h"), selected = "a"),
br(),
selectInput("col", "2. Select histogram colour", choices = c("blue","green","red","purple","grey"), selected = "grey"),
br(),
sliderInput("bin", "3. Select number of histogram bins", min=1, max=25, value= c(10)),
br(),
textInput("text", "4. Enter some text to be displayed", "")),
mainPanel(
plotOutput("myhist"),
tableOutput("mytable"),
textOutput("mytext")
)
)
)
# server.R ----
server <- function(input, output) {
output$myhist <- renderPlot(ggplot(Barley, aes(x = yield)) + geom_histogram(bins = input$bin,
fill = input$col,
group=input$gen,
data=Barley[Barley$gen == input$gen,],
colour = "black"))
output$mytext <- renderText(input$text)
output$mytable <- renderTable(Barley %>%
filter(gen == input$gen) %>%
summarise("Mean" = mean(yield),
"Median" = median(yield),
"STDEV" = sd(yield),
"Min" = min(yield),
"Max" = max(yield)))
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(ggplot2)  # For creating pretty plots
# Run the app ----
shinyApp(ui = ui, server = server)
library(dplyr)  # For filtering and manipulating data
runApp('E:/GitHub/Coding Club/CC-11-Shiny/Example_App')
# For interactive map
library(tidyverse)
library(sf)
library(mapview)
partner_coord <- read_csv("E:/GitHub/Partner_Tracking/UWIN_city_coords.csv")
partner_coord$Latitude <- as.double(partner_coord$Latitude)
partner_coord$Longitude <- as.double(partner_coord$Longitude)
mapview(partner_coord, xcol = "Longitude", ycol = "Latitude", crs = 4326,
grid = FALSE, layer.name = "UWIN partners", color = "gray", alpha = 0)
# For flat map
library(ggplot2)
library(dplyr)
partner_df <- as.data.frame(partner_coord, region = "City")
coords = sf::st_as_sf(               #sf = spatial tool
partner_coord,
coords = c("Longitude", "Latitude"),
crs = 4326)
sort(unique(ggplot2::map_data("world")$region)) #region options
world_map = map_data("world")
USA = map_data("world", region = "USA")
Canada = map_data("world", region = "Canada")
Germany = map_data("world", region = "Germany")
South.Africa = map_data("world", region = "South Africa")
Madagascar = map_data("world", region = "Madagascar")
Mexico = map_data("world", region = "Mexico")
# colors: http://sape.inf.usi.ch/quick-reference/ggplot2/colour
map <- ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill="gray", colour = "white")+
geom_polygon(data = USA, fill = "#CCCC66")+
geom_polygon(data = Canada, fill = "#669933")+
geom_polygon(data = Germany, fill = "#FFCC66")+
geom_polygon(data = South.Africa, fill = "#99CC00")+
geom_polygon(data = Madagascar, fill = "#CC9966")+
geom_polygon(data = Mexico, fill = "#CC6633")+
geom_point(data = partner_df, aes(x = Longitude, y = Latitude), inherit.aes = FALSE, pch = 21, fill = "black", color = "black")+
theme_bw()+
# theme(legend.position = "none",
#       panel.grid = element_blank(),
#       axis.title = element_blank(),
#       panel.border = element_blank(),
#       axis.text = element_blank(),
#       axis.ticks = element_blank(),
#       axis.line = element_line(colour = "gray"))+
xlim(-175,75)+
ylim(-70,75)+
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray"))+
theme_void()
print(map)
# Load libraries----------------------------------------------------------------
library(tidyverse)
library(lubridate)
library(dplyr)
# reading in data---------------------------------------------------------------
model_data = data.table::fread("Data/model_data.csv", data.table = FALSE)
setwd("E:/GitHub/Zooniverse_manuscript")
# Load libraries----------------------------------------------------------------
library(tidyverse)
library(lubridate)
library(dplyr)
# Read in data------------------------------------------------------------------
zoo = data.table::fread("data/zoo_merged.csv", data.table = FALSE)
zoo = data.table::fread("zoo_merged.csv", data.table = FALSE)
# Filter out data not useful to analyses----------------------------------------
## Filter out photos with 2+ animals
UWI_db = zoo %>%
select(expertID, photoName, subject_id) %>%
group_by(photoName, subject_id) %>%
count(expertID) %>%
filter(length(photoName) >= 2) %>%
select(-n)
## These are photoNames which should be removed from zooniverse data because they have
## 2+ species in them and zooniverse does not distinguish these
photos_to_rm = UWI_db %>%
ungroup(.) %>%
distinct(photoName)
total_photos = test %>%
ungroup(.) %>%
distinct(photoName)
# Filter out data not useful to analyses----------------------------------------
## Filter out photos with 2+ animals
test = zoo %>%
select(expertID, photoName, subject_id) %>%
group_by(photoName, subject_id) %>%
count(expertID) %>%
select(-n)
UWI_db = zoo %>%
select(expertID, photoName, subject_id) %>%
group_by(photoName, subject_id) %>%
count(expertID) %>%
filter(length(photoName) >= 2) %>%
select(-n)
## These are photoNames which should be removed from zooniverse data because they have
## 2+ species in them and zooniverse does not distinguish these
photos_to_rm = UWI_db %>%
ungroup(.) %>%
distinct(photoName)
total_photos = test %>%
ungroup(.) %>%
distinct(photoName)
(length(total_photos$photoName)-length(photos_to_rm$photoName))/length(total_photos$photoName)
# Remove from entire dataset
zoo = zoo[-which(zoo$photoName %in% photos_to_rm$photoName),]
# Remove tags after n = 15
# n_seen = # of people who viewed each photo
zoo = zoo %>%
group_by(subject_id) %>%
summarise(n_seen = length(subject_id)) %>%
left_join(., zoo)
zoo = zoo %>%
filter(n_seen <= 15)
# fix weights which got incorrectly joined, drop here first
zoo = zoo %>%
select(-animal_weight)
# Tidy up data------------------------------------------------------------------
# Match species naming between Zooniverse choice and experts
unique(zoo$choice)
zoo$choice <- trimws(zoo$choice)
unique(zoo$expertID)
zoo$expertID <- trimws(zoo$expertID)
# Collapse species groups
zoo <- zoo %>% mutate(expertID = fct_collapse(expertID,
"Rat spp." = c("Rat spp.", "Brown Rat"),
"weasel" = c("Least weasel", "Long-tailed weasel"),
"Bird" = c("Bird","American robin", "Mallard duck"),
"Eastern gray squirrel" = c("Eastern gray squirrel", "melanistic gray squirrel"),
"Human" = c("Golf cart", "Human")))
zoo <- zoo %>% mutate(choice = fct_collapse(choice,
"Empty" = c("nothinghere"),
"Eastern cottontail rabbit" = c("rabbit"),
"Human" = c("human", "mower"),
"Domestic dog" = "dogdomestic",
"Eastern gray squirrel" = c("squirrelmelanisticgray", "squirrelgray"),
"Raccoon" = "raccoon",
"Mouse" = "mouse",
"White-tailed deer" = "deer",
"Rat spp." = "rat",
"Virginia opossum" = "opossum",
"Bird" = c("bird"),
"Fox squirrel" = "squirrelfox",
"Woodchuck" = "woodchuckakagroundhog",
"Gray fox" = "foxgray",
"Domestic cat" = "catdomestic",
"American mink" = "mink",
"Red fox" = "foxred",
"Striped Skunk" = "skunk",
"North american beaver" = "beaver",
"Eastern chipmunk" = "chipmunk",
"Coyote" = "coyote",
"Flying squirrel (cannot ID)" = "squirrelflying",
"Squirrel (cannot ID)" = "treesquirrelbwimage"))
# Drop columns which don't match
zoo = zoo %>%
filter(expertID != "Unknown")
zoo = zoo %>%
filter(expertID != "Snake")
# Add correct model weight back in for modeling---------------------------------
animal_weight = read_csv("animal_weights.csv", col_names = TRUE)
# Add correct model weight back in for modeling---------------------------------
animal_weight = read_csv("animal_weights.csv", col_names = TRUE)
zoo = left_join(zoo, animal_weight, by = "expertID")
View(zoo)
View(animal_weight)
zoo = left_join(zoo, animal_weight, by = "expertID")
zoo = left_join(zoo, animal_weight, by = "expertID", relationship = "many-to-many")
zoo = zoo %>%
select(-avid_user)
avid_user = zoo %>%
group_by(user_id) %>%
count(user_id) %>%
mutate(avid_user = ifelse(n >= quantile(.$n, probs = .95), 1, 0)) %>%
rename(., user_tag_count = n)
zoo = left_join(zoo, avid_user, by = "user_id")
# Add column of the number of species identified for each subject_id
zoo = zoo %>%
group_by(retired.id) %>%
summarise(unique.choice = length(unique(choice))) %>% #unique.choice = # of species ppl tagged an image
left_join(., zoo)
zoo = zoo %>%
mutate(after_retirement = ifelse(created_at > retired.retired_at, 1, 0))
# Let's make functions to recreate zooniverse's retirement classes--------------
zoo_list = split(zoo, factor(zoo$subject_id))
# Read in data------------------------------------------------------------------
zoo = data.table::fread("data/zoo_merged.csv", data.table = FALSE)
library(tidyverse)
library(lubridate)
library(dplyr)
# Read in data------------------------------------------------------------------
zoo = data.table::fread("data/zoo_merged.csv", data.table = FALSE)
setwd("E:/GitHub/Zooniverse_manuscript")
zoo = data.table::fread("zoo_merged.csv", data.table = FALSE)
setwd("E:/GitHub/Zooniverse_manuscript")
getwd()
